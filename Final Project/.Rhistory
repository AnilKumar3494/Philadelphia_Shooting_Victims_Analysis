shootings.raw %>% summarise_all(~ sum(is.na(.)))
shootings.raw %>% filter(if_any(fatal, is.na))
shootings.raw %>% filter(officer_involved == 'Y')
shootings.officer = shootings.raw %>% filter(officer_involved == 'Y')
shootings.officer %>% filter(offender_deceased == 'Y')
shootings.adjusted = shootings.raw
shootings.adjusted$offender_fatal <- ifelse(shootings.raw$offender_deceased == "Y", 1, 0)
shootings.adjusted <- shootings.adjusted %>%
mutate(fatal = replace_na(fatal, 0))
shootings.adjusted$total_fatality <- shootings.adjusted$offender_fatal + shootings.adjusted$fatal
shootings.adjusted
sum(shootings.adjusted$total_fatality)
fatal.byyear = aggregate(shootings.adjusted['total_fatality'], by=shootings.adjusted['year'], sum)
fatal.byyear
# View structure
glimpse(shootings.raw)
summary(shootings.raw)
shootings.raw  <- shootings.raw  %>%
filter(!is.na(lat) & !is.na(lng)) %>%
rename(latitude = lat, longitude = lng)
shootings_sf <- st_as_sf(shootings.raw , coords = c("longitude", "latitude"), crs = 4326)
ggplot(data = shootings_sf) +
geom_sf(alpha = 0.3, color = "red") +
theme_minimal() +
labs(title = "Philadelphia Shooting Incidents",
subtitle = "Based on geospatial coordinates",
caption = "Source: philly_shootings.csv")
# Add a unique ID to each row in the dataset
shootings_sf <- shootings_sf %>%
mutate(unique_id = paste0("marker-", row_number(), "-", year))
# Create a unique list of years
years <- sort(unique(shootings_sf$year))
# Create a more visually appealing color palette (e.g., from RColorBrewer)
# Use a palette with enough distinct colors for the number of years
if (length(years) <= 8) {
year_colors <- colorRampPalette(brewer.pal(length(years), "Dark2"))(length(years))
} else {
year_colors <- colorRampPalette(brewer.pal(9, "Dark2"))(length(years)) # Max 9 for Dark2
}
year_colors <- colorFactor(palette = year_colors, domain = years)
# Create base map centered on Philadelphia
center_lon <- -75.1652
center_lat <- 39.9526
m <- leaflet() %>%
setView(lng = center_lon, lat = center_lat, zoom = 11) %>%
addProviderTiles(providers$CartoDB.Positron) %>% # A cleaner tile style
htmlwidgets::onRender("function(el, x) {
L.DomUtil.addClass(this._map.container, 'safegraph-map');
}")
# Add circles by year
for (yr in years) {
m <- m %>% addCircleMarkers(
data = shootings_sf %>% filter(year == yr),
radius = 5, # Slightly larger radius
color = ~year_colors(year),
fillOpacity = 0.7, # Slightly more opaque
stroke = FALSE,
group = as.character(yr), # Use year directly as group
popup = ~paste(
"<b>Year:</b>", year, "<br>",
"<b>Date:</b>", date_, "<br>",
"<b>Location:</b>", location
),
layerId = ~unique_id
)
}
# Add layer control
m <- m %>% addLayersControl(
overlayGroups = as.character(years), # Use years directly
options = layersControlOptions(collapsed = FALSE)
)
# Add "Select All" / "Deselect All" button using HTML and JavaScript
select_all_js <- paste0('
function(el, x, data) {
var map = this;
var yearGroups = ', jsonlite::toJSON(years), '; // Use the years array
var selectAllButton = L.DomUtil.create("button", "leaflet-control-layers-selector safegraph-button"); // Apply a custom class
selectAllButton.innerHTML = "Select All Years";
selectAllButton.style.marginBottom = "10px";
var layersControl = el.querySelector(".leaflet-control-layers-overlays");
if (layersControl) {
layersControl.parentNode.insertBefore(selectAllButton, layersControl);
selectAllButton.onclick = function() {
var allChecked = true;
yearGroups.forEach(function(group) {
var checkbox = document.querySelector(\'input[value="\' + group + \'"]\');
if (checkbox && !checkbox.checked) {
allChecked = false;
}
});
yearGroups.forEach(function(group) {
var checkbox = document.querySelector(\'input[value="\' + group + \'"]\');
if (checkbox) {
checkbox.checked = !allChecked;
checkbox.dispatchEvent(new Event("change")); // Trigger layer update
}
});
selectAllButton.innerHTML = allChecked ? "Select All Years" : "Deselect All Years";
};
}
}
')
m <- htmlwidgets::onRender(m, select_all_js)
# Add legend
m <- m %>% addLegend(
position = "bottomright",
colors = year_colors(years), # Use the color palette
labels = years,             # Use the years as labels
title = "Shooting Year",
opacity = 1
)
# Add CSS for styling
m <- m %>% htmlwidgets::onRender("
function(el, x) {
var css = `
.safegraph-map {
border-radius: 8px;
box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
overflow: hidden;
}
.safegraph-button {
background-color: #f0f0f0;
border: 1px solid #ccc;
border-radius: 4px;
padding: 4px 8px;
font-size: 12px;
cursor: pointer;
transition: background-color 0.3s ease;
font-family: 'Arial', sans-serif;
color: #333;
display: inline-block;
text-align: center;
white-space: nowrap;
}
.safegraph-button:hover {
background-color: #e0e0e0;
}
.leaflet-control-layers-list input[type='checkbox'] {
margin-right: 4px;
}
.leaflet-popup-content {
font-size: 12px;
line-height: 1.4;
}
.leaflet-popup-content b {
font-weight: 600;
color: #2c3e50;
}
.leaflet-control-layers {
background-color: rgba(255, 255, 255, 0.9);
border-radius: 8px;
box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);
padding: 6px 10px;
font-size: 12px;
color: #34495e;
}
.leaflet-control-layers-title {
font-weight: bold;
margin-bottom: 6px;
color: #2c3e50;
}
.leaflet-control-layers-prefix {
margin-right: 6px;
}
`;
var style = document.createElement('style');
style.type = 'text/css';
style.appendChild(document.createTextNode(css));
document.head.appendChild(style);
}
")
m
---
title: "Philadelphia Shooting Victims Analysis"
# Install necessary packages (run this only once)
# install.packages(c("tidyverse", "sf", "leaflet", "ggplot2", "viridis", "readr", "sp", "leaflet.extras", "readxl"))
# Load the packages
library(tidyverse)
library(sf)
library(leaflet)
library(ggplot2)
library(viridis)
library(readr)
library(sp)
library(leaflet.extras)
library(tidyverse)
library(readxl)
shootings.raw = read_delim(
"./philly_shootings.csv",
delim=",",
show_col_types = FALSE,
) %>% glimpse()
shootings.raw %>% summarise_all(~ sum(is.na(.)))
shootings.raw %>% filter(if_any(fatal, is.na))
shootings.raw %>% filter(officer_involved == 'Y')
shootings.officer = shootings.raw %>% filter(officer_involved == 'Y')
shootings.officer %>% filter(offender_deceased == 'Y')
shootings.adjusted = shootings.raw
shootings.adjusted$offender_fatal <- ifelse(shootings.raw$offender_deceased == "Y", 1, 0)
shootings.adjusted <- shootings.adjusted %>%
mutate(fatal = replace_na(fatal, 0))
shootings.adjusted$total_fatality <- shootings.adjusted$offender_fatal + shootings.adjusted$fatal
shootings.adjusted
sum(shootings.adjusted$total_fatality)
fatal.byyear = aggregate(shootings.adjusted['total_fatality'], by=shootings.adjusted['year'], sum)
fatal.15to24 <- fatal.byyear %>%
filter(year != 2025)
ggplot(data = fatal.15to24, aes(x = year, y = total_fatality)) +
ggtitle("Total Fatal Shooting Victims by Year 2015-2024") +
geom_col() +
scale_x_continuous(breaks = 2015:2024)
# View structure
glimpse(shootings.raw)
summary(shootings.raw)
shootings.raw  <- shootings.raw  %>%
filter(!is.na(lat) & !is.na(lng)) %>%
rename(latitude = lat, longitude = lng)
shootings_sf <- st_as_sf(shootings.raw , coords = c("longitude", "latitude"), crs = 4326)
ggplot(data = shootings_sf) +
geom_sf(alpha = 0.3, color = "red") +
theme_minimal() +
labs(title = "Philadelphia Shooting Incidents",
subtitle = "Based on geospatial coordinates",
caption = "Source: philly_shootings.csv")
leaflet(data = shootings_sf) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(radius = 3, color = "red", fillOpacity = 0.5,
popup = ~paste("Date:", date_, "<br>",
"Location:", location))
# Precompute coordinates from sf object
coords <- st_coordinates(shootings_sf)
# Bind coordinates as columns to original data
shootings_coords <- shootings_sf %>%
mutate(long = coords[,1], lat = coords[,2])
# Now use lat/lng in leaflet
leaflet(data = shootings_coords) %>%
addProviderTiles("CartoDB.DarkMatter") %>%
addHeatmap(lng = ~long,
lat = ~lat,
blur = 20, max = 0.1, radius = 15)
# Install necessary packages (run this only once)
# install.packages(c("tidyverse", "sf", "leaflet", "ggplot2", "viridis", "readr", "sp", "leaflet.extras", "readxl", "htmltools", "htmlwidgets", "shiny", "dplyr"))
#install.packages("RColorBrewer")
# Load the packages
library(tidyverse)
library(sf)
library(leaflet)
library(ggplot2)
library(viridis)
library(readr)
library(sp)
library(leaflet.extras)
library(htmltools)
library(htmlwidgets)
library(shiny)
library(dplyr)
library(RColorBrewer)
library(tidyverse)
library(readxl)
shootings.raw = read_delim(
"./philly_shootings.csv",
delim=",",
show_col_types = FALSE,
) %>% glimpse()
shootings.raw %>% summarise_all(~ sum(is.na(.)))
shootings.raw %>% filter(if_any(fatal, is.na))
shootings.raw %>% filter(officer_involved == 'Y')
shootings.officer = shootings.raw %>% filter(officer_involved == 'Y')
shootings.officer %>% filter(offender_deceased == 'Y')
shootings.adjusted = shootings.raw
shootings.adjusted$offender_fatal <- ifelse(shootings.raw$offender_deceased == "Y", 1, 0)
shootings.adjusted <- shootings.adjusted %>%
mutate(fatal = replace_na(fatal, 0))
shootings.adjusted$total_fatality <- shootings.adjusted$offender_fatal + shootings.adjusted$fatal
shootings.adjusted
sum(shootings.adjusted$total_fatality)
fatal.byyear = aggregate(shootings.adjusted['total_fatality'], by=shootings.adjusted['year'], sum)
fatal.15to24 <- fatal.byyear %>%
filter(year != 2025)
ggplot(data = fatal.15to24, aes(x = year, y = total_fatality)) +
ggtitle("Total Fatal Shooting Victims by Year 2015-2024") +
geom_col() +
scale_x_continuous(breaks = 2015:2024)
# View structure
glimpse(shootings.adjusted)
summary(shootings.adjusted)
shootings.spatial  <- shootings.adjusted %>%
filter(!is.na(lat) & !is.na(lng)) %>%
rename(latitude = lat, longitude = lng)
shootings_sf <- st_as_sf(shootings.spatial , coords = c("longitude", "latitude"), crs = 4326)
ggplot(data = shootings_sf) +
geom_sf(alpha = 0.3, color = "red") +
theme_minimal() +
labs(title = "Philadelphia Shooting Incidents",
subtitle = "Based on geospatial coordinates",
caption = "Source: philly_shootings.csv")
# Add a unique ID to each row in the dataset
shootings_sf <- shootings_sf %>%
mutate(unique_id = paste0("marker-", row_number(), "-", year))
# Create a unique list of years
years <- sort(unique(shootings_sf$year))
# Create a more visually appealing color palette (e.g., from RColorBrewer)
# Use a palette with enough distinct colors for the number of years
if (length(years) <= 8) {
year_colors <- colorRampPalette(brewer.pal(length(years), "Dark2"))(length(years))
} else {
year_colors <- colorRampPalette(brewer.pal(9, "Dark2"))(length(years)) # Max 9 for Dark2
}
year_colors <- colorFactor(palette = year_colors, domain = years)
# Create base map centered on Philadelphia
center_lon <- -75.1652
center_lat <- 39.9526
m <- leaflet() %>%
setView(lng = center_lon, lat = center_lat, zoom = 11) %>%
addProviderTiles(providers$CartoDB.Positron) %>% # A cleaner tile style
htmlwidgets::onRender("function(el, x) {
L.DomUtil.addClass(this._map.container, 'safegraph-map');
}")
# Add circles by year
for (yr in years) {
m <- m %>% addCircleMarkers(
data = shootings_sf %>% filter(year == yr),
radius = 5, # Slightly larger radius
color = ~year_colors(year),
fillOpacity = 0.7, # Slightly more opaque
stroke = FALSE,
group = as.character(yr), # Use year directly as group
popup = ~paste(
"<b>Year:</b>", year, "<br>",
"<b>Date:</b>", date_, "<br>",
"<b>Location:</b>", location
),
layerId = ~unique_id
)
}
# Add layer control
m <- m %>% addLayersControl(
overlayGroups = as.character(years), # Use years directly
options = layersControlOptions(collapsed = FALSE)
)
# Add "Select All" / "Deselect All" button using HTML and JavaScript
select_all_js <- paste0('
function(el, x, data) {
var map = this;
var yearGroups = ', jsonlite::toJSON(years), '; // Use the years array
var selectAllButton = L.DomUtil.create("button", "leaflet-control-layers-selector safegraph-button"); // Apply a custom class
selectAllButton.innerHTML = "Select All Years";
selectAllButton.style.marginBottom = "10px";
var layersControl = el.querySelector(".leaflet-control-layers-overlays");
if (layersControl) {
layersControl.parentNode.insertBefore(selectAllButton, layersControl);
selectAllButton.onclick = function() {
var allChecked = true;
yearGroups.forEach(function(group) {
var checkbox = document.querySelector(\'input[value="\' + group + \'"]\');
if (checkbox && !checkbox.checked) {
allChecked = false;
}
});
yearGroups.forEach(function(group) {
var checkbox = document.querySelector(\'input[value="\' + group + \'"]\');
if (checkbox) {
checkbox.checked = !allChecked;
checkbox.dispatchEvent(new Event("change")); // Trigger layer update
}
});
selectAllButton.innerHTML = allChecked ? "Select All Years" : "Deselect All Years";
};
}
}
')
m <- htmlwidgets::onRender(m, select_all_js)
# Add legend
m <- m %>% addLegend(
position = "bottomright",
colors = year_colors(years), # Use the color palette
labels = years,             # Use the years as labels
title = "Shooting Year",
opacity = 1
)
# Add CSS for styling
m <- m %>% htmlwidgets::onRender("
function(el, x) {
var css = `
.safegraph-map {
border-radius: 8px;
box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
overflow: hidden;
}
.safegraph-button {
background-color: #f0f0f0;
border: 1px solid #ccc;
border-radius: 4px;
padding: 4px 8px;
font-size: 12px;
cursor: pointer;
transition: background-color 0.3s ease;
font-family: 'Arial', sans-serif;
color: #333;
display: inline-block;
text-align: center;
white-space: nowrap;
}
.safegraph-button:hover {
background-color: #e0e0e0;
}
.leaflet-control-layers-list input[type='checkbox'] {
margin-right: 4px;
}
.leaflet-popup-content {
font-size: 12px;
line-height: 1.4;
}
.leaflet-popup-content b {
font-weight: 600;
color: #2c3e50;
}
.leaflet-control-layers {
background-color: rgba(255, 255, 255, 0.9);
border-radius: 8px;
box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);
padding: 6px 10px;
font-size: 12px;
color: #34495e;
}
.leaflet-control-layers-title {
font-weight: bold;
margin-bottom: 6px;
color: #2c3e50;
}
.leaflet-control-layers-prefix {
margin-right: 6px;
}
`;
var style = document.createElement('style');
style.type = 'text/css';
style.appendChild(document.createTextNode(css));
document.head.appendChild(style);
}
")
m
```{r leaflet_heatmap}
library(tidyverse)
library(readxl)
shootings.raw = read_delim(
"./philly_shootings.csv",
delim=",",
show_col_types = FALSE,
) %>% glimpse()
shootings.raw %>% summarise_all(~ sum(is.na(.)))
shootings.raw %>% filter(if_any(fatal, is.na))
shootings.raw %>% filter(officer_involved == 'Y')
shootings.officer = shootings.raw %>% filter(officer_involved == 'Y')
shootings.officer %>% filter(offender_deceased == 'Y')
shootings.adjusted = shootings.raw
shootings.adjusted$offender_fatal <- ifelse(shootings.raw$offender_deceased == "Y", 1, 0)
shootings.adjusted <- shootings.adjusted %>%
mutate(fatal = replace_na(fatal, 0))
shootings.adjusted$total_fatality <- shootings.adjusted$offender_fatal + shootings.adjusted$fatal
shootings.adjusted
sum(shootings.adjusted$total_fatality)
fatal.byyear = aggregate(shootings.adjusted['total_fatality'], by=shootings.adjusted['year'], sum)
fatal.15to24 <- fatal.byyear %>%
filter(year != 2025)
ggplot(data = fatal.15to24, aes(x = year, y = total_fatality)) +
ggtitle("Total Fatal Shooting Victims by Year 2015-2024") +
geom_col() +
scale_x_continuous(breaks = 2015:2024)
fatal.only <- shootings.adjusted %>%
filter(fatal == 1)
fatal.only <- fatal.only[!is.na(fatal.only$age), ]
mean(fatal.only$age)
ggplot(data = shootings.adjusted, aes(x = age, y = fatal)) +
ggtitle("Age Distribution of Fatal Shooting Victims") +
geom_col()
age_avg <- fatal.only %>%
group_by(year) %>%
summarize(average_value = mean(age))
age_avg
ggplot(data = age_avg, aes(x = year, y = average_value)) +
ggtitle("Average Age of Fatal Shooting Victims by Year 2015-2024") +
geom_col() +
scale_x_continuous(breaks = 2015:2024)
# View structure
glimpse(shootings.raw)
summary(shootings.raw)
shootings.raw  <- shootings.raw  %>%
filter(!is.na(lat) & !is.na(lng)) %>%
rename(latitude = lat, longitude = lng)
shootings_sf <- st_as_sf(shootings.raw , coords = c("longitude", "latitude"), crs = 4326)
ggplot(data = shootings_sf) +
geom_sf(alpha = 0.3, color = "red") +
theme_minimal() +
labs(title = "Philadelphia Shooting Incidents",
subtitle = "Based on geospatial coordinates",
caption = "Source: philly_shootings.csv")
leaflet(data = shootings_sf) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(radius = 3, color = "red", fillOpacity = 0.5,
popup = ~paste("Date:", date_, "<br>",
"Location:", location))
# Precompute coordinates from sf object
coords <- st_coordinates(shootings_sf)
# Bind coordinates as columns to original data
shootings_coords <- shootings_sf %>%
mutate(long = coords[,1], lat = coords[,2])
# Now use lat/lng in leaflet
leaflet(data = shootings_coords) %>%
addProviderTiles("CartoDB.DarkMatter") %>%
addHeatmap(lng = ~long,
lat = ~lat,
blur = 20, max = 0.1, radius = 15)
